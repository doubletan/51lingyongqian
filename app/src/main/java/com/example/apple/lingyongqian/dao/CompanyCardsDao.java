package com.example.apple.lingyongqian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table e_companycards.
*/
public class CompanyCardsDao extends AbstractDao<CompanyCards, Long> {

    public static final String TABLENAME = "e_companycards";

    /**
     * Properties of entity CompanyCards.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property C_id = new Property(0, Long.class, "c_id", true, "C_ID");
        public final static Property C_pid = new Property(1, Long.class, "c_pid", false, "C_PID");
        public final static Property C_add_date = new Property(2, String.class, "c_add_date", false, "C_ADD_DATE");
        public final static Property C_name = new Property(3, String.class, "c_name", false, "C_NAME");
        public final static Property C_address = new Property(4, String.class, "c_address", false, "C_ADDRESS");
        public final static Property C_tell = new Property(5, String.class, "c_tell", false, "C_TELL");
        public final static Property C_email = new Property(6, String.class, "c_email", false, "C_EMAIL");
        public final static Property C_describ = new Property(7, String.class, "c_describ", false, "C_DESCRIB");
    };


    public CompanyCardsDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyCardsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'e_companycards' (" + //
                "'C_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: c_id
                "'C_PID' INTEGER," + // 1: c_pid
                "'C_ADD_DATE' TEXT," + // 2: c_add_date
                "'C_NAME' TEXT," + // 3: c_name
                "'C_ADDRESS' TEXT," + // 4: c_address
                "'C_TELL' TEXT," + // 5: c_tell
                "'C_EMAIL' TEXT," + // 6: c_email
                "'C_DESCRIB' TEXT);"); // 7: c_describ
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'e_companycards'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CompanyCards entity) {
        stmt.clearBindings();
 
        Long c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindLong(1, c_id);
        }
 
        Long c_pid = entity.getC_pid();
        if (c_pid != null) {
            stmt.bindLong(2, c_pid);
        }
 
        String c_add_date = entity.getC_add_date();
        if (c_add_date != null) {
            stmt.bindString(3, c_add_date);
        }
 
        String c_name = entity.getC_name();
        if (c_name != null) {
            stmt.bindString(4, c_name);
        }
 
        String c_address = entity.getC_address();
        if (c_address != null) {
            stmt.bindString(5, c_address);
        }
 
        String c_tell = entity.getC_tell();
        if (c_tell != null) {
            stmt.bindString(6, c_tell);
        }
 
        String c_email = entity.getC_email();
        if (c_email != null) {
            stmt.bindString(7, c_email);
        }
 
        String c_describ = entity.getC_describ();
        if (c_describ != null) {
            stmt.bindString(8, c_describ);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CompanyCards readEntity(Cursor cursor, int offset) {
        CompanyCards entity = new CompanyCards( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // c_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // c_pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // c_add_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // c_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // c_address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // c_tell
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // c_email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // c_describ
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CompanyCards entity, int offset) {
        entity.setC_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setC_pid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setC_add_date(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setC_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setC_address(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setC_tell(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setC_email(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setC_describ(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CompanyCards entity, long rowId) {
        entity.setC_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CompanyCards entity) {
        if(entity != null) {
            return entity.getC_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
