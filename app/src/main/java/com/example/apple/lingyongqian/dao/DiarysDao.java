package com.example.apple.lingyongqian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table e_diarys.
*/
public class DiarysDao extends AbstractDao<Diarys, Long> {

    public static final String TABLENAME = "e_diarys";

    /**
     * Properties of entity Diarys.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property D_id = new Property(0, Long.class, "d_id", true, "D_ID");
        public final static Property D_pid = new Property(1, Long.class, "d_pid", false, "D_PID");
        public final static Property D_add_date = new Property(2, String.class, "d_add_date", false, "D_ADD_DATE");
        public final static Property D_textcontent = new Property(3, String.class, "d_textcontent", false, "D_TEXTCONTENT");
        public final static Property D_img_url = new Property(4, String.class, "d_img_url", false, "D_IMG_URL");
        public final static Property D_voice_url = new Property(5, String.class, "d_voice_url", false, "D_VOICE_URL");
        public final static Property D_feeling = new Property(6, Integer.class, "d_feeling", false, "D_FEELING");
    };


    public DiarysDao(DaoConfig config) {
        super(config);
    }
    
    public DiarysDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'e_diarys' (" + //
                "'D_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: d_id
                "'D_PID' INTEGER," + // 1: d_pid
                "'D_ADD_DATE' TEXT," + // 2: d_add_date
                "'D_TEXTCONTENT' TEXT," + // 3: d_textcontent
                "'D_IMG_URL' TEXT," + // 4: d_img_url
                "'D_VOICE_URL' TEXT," + // 5: d_voice_url
                "'D_FEELING' INTEGER);"); // 6: d_feeling
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'e_diarys'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Diarys entity) {
        stmt.clearBindings();
 
        Long d_id = entity.getD_id();
        if (d_id != null) {
            stmt.bindLong(1, d_id);
        }
 
        Long d_pid = entity.getD_pid();
        if (d_pid != null) {
            stmt.bindLong(2, d_pid);
        }
 
        String d_add_date = entity.getD_add_date();
        if (d_add_date != null) {
            stmt.bindString(3, d_add_date);
        }
 
        String d_textcontent = entity.getD_textcontent();
        if (d_textcontent != null) {
            stmt.bindString(4, d_textcontent);
        }
 
        String d_img_url = entity.getD_img_url();
        if (d_img_url != null) {
            stmt.bindString(5, d_img_url);
        }
 
        String d_voice_url = entity.getD_voice_url();
        if (d_voice_url != null) {
            stmt.bindString(6, d_voice_url);
        }
 
        Integer d_feeling = entity.getD_feeling();
        if (d_feeling != null) {
            stmt.bindLong(7, d_feeling);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Diarys readEntity(Cursor cursor, int offset) {
        Diarys entity = new Diarys( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // d_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // d_pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // d_add_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // d_textcontent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // d_img_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // d_voice_url
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // d_feeling
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Diarys entity, int offset) {
        entity.setD_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setD_pid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setD_add_date(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setD_textcontent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setD_img_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setD_voice_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setD_feeling(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Diarys entity, long rowId) {
        entity.setD_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Diarys entity) {
        if(entity != null) {
            return entity.getD_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
