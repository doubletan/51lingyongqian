package com.example.apple.lingyongqian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table e_personcards.
*/
public class PersonCardsDao extends AbstractDao<PersonCards, Long> {

    public static final String TABLENAME = "e_personcards";

    /**
     * Properties of entity PersonCards.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property P_id = new Property(0, Long.class, "p_id", true, "P_ID");
        public final static Property P_pid = new Property(1, Long.class, "p_pid", false, "P_PID");
        public final static Property P_add_date = new Property(2, String.class, "p_add_date", false, "P_ADD_DATE");
        public final static Property P_sex = new Property(3, String.class, "p_sex", false, "P_SEX");
        public final static Property P_tell = new Property(4, String.class, "p_tell", false, "P_TELL");
        public final static Property P_describ = new Property(5, String.class, "p_describ", false, "P_DESCRIB");
        public final static Property P_name = new Property(6, String.class, "p_name", false, "P_NAME");
        public final static Property P_adress = new Property(7, String.class, "p_adress", false, "P_ADRESS");
        public final static Property P_email = new Property(8, String.class, "p_email", false, "P_EMAIL");
    };


    public PersonCardsDao(DaoConfig config) {
        super(config);
    }
    
    public PersonCardsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'e_personcards' (" + //
                "'P_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: p_id
                "'P_PID' INTEGER," + // 1: p_pid
                "'P_ADD_DATE' TEXT," + // 2: p_add_date
                "'P_SEX' TEXT," + // 3: p_sex
                "'P_TELL' TEXT," + // 4: p_tell
                "'P_DESCRIB' TEXT," + // 5: p_describ
                "'P_NAME' TEXT," + // 6: p_name
                "'P_ADRESS' TEXT," + // 7: p_adress
                "'P_EMAIL' TEXT);"); // 8: p_email
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'e_personcards'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PersonCards entity) {
        stmt.clearBindings();
 
        Long p_id = entity.getP_id();
        if (p_id != null) {
            stmt.bindLong(1, p_id);
        }
 
        Long p_pid = entity.getP_pid();
        if (p_pid != null) {
            stmt.bindLong(2, p_pid);
        }
 
        String p_add_date = entity.getP_add_date();
        if (p_add_date != null) {
            stmt.bindString(3, p_add_date);
        }
 
        String p_sex = entity.getP_sex();
        if (p_sex != null) {
            stmt.bindString(4, p_sex);
        }
 
        String p_tell = entity.getP_tell();
        if (p_tell != null) {
            stmt.bindString(5, p_tell);
        }
 
        String p_describ = entity.getP_describ();
        if (p_describ != null) {
            stmt.bindString(6, p_describ);
        }
 
        String p_name = entity.getP_name();
        if (p_name != null) {
            stmt.bindString(7, p_name);
        }
 
        String p_adress = entity.getP_adress();
        if (p_adress != null) {
            stmt.bindString(8, p_adress);
        }
 
        String p_email = entity.getP_email();
        if (p_email != null) {
            stmt.bindString(9, p_email);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PersonCards readEntity(Cursor cursor, int offset) {
        PersonCards entity = new PersonCards( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // p_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // p_pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // p_add_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // p_sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // p_tell
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // p_describ
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // p_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // p_adress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // p_email
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PersonCards entity, int offset) {
        entity.setP_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setP_pid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setP_add_date(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setP_sex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setP_tell(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setP_describ(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setP_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setP_adress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setP_email(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PersonCards entity, long rowId) {
        entity.setP_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PersonCards entity) {
        if(entity != null) {
            return entity.getP_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
