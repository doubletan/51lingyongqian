package com.example.apple.lingyongqian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table e_notes.
*/
public class NotesDao extends AbstractDao<Notes, Long> {

    public static final String TABLENAME = "e_notes";

    /**
     * Properties of entity Notes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property N_id = new Property(0, Long.class, "n_id", true, "N_ID");
        public final static Property N_pid = new Property(1, Long.class, "n_pid", false, "N_PID");
        public final static Property N_add_date = new Property(2, String.class, "n_add_date", false, "N_ADD_DATE");
        public final static Property N_textcontent = new Property(3, String.class, "n_textcontent", false, "N_TEXTCONTENT");
        public final static Property N_img_url = new Property(4, String.class, "n_img_url", false, "N_IMG_URL");
        public final static Property N_voice_url = new Property(5, String.class, "n_voice_url", false, "N_VOICE_URL");
        public final static Property N_isdone = new Property(6, String.class, "n_isdone", false, "N_ISDONE");
    };


    public NotesDao(DaoConfig config) {
        super(config);
    }
    
    public NotesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'e_notes' (" + //
                "'N_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: n_id
                "'N_PID' INTEGER," + // 1: n_pid
                "'N_ADD_DATE' TEXT," + // 2: n_add_date
                "'N_TEXTCONTENT' TEXT," + // 3: n_textcontent
                "'N_IMG_URL' TEXT," + // 4: n_img_url
                "'N_VOICE_URL' TEXT," + // 5: n_voice_url
                "'N_ISDONE' TEXT);"); // 6: n_isdone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'e_notes'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Notes entity) {
        stmt.clearBindings();
 
        Long n_id = entity.getN_id();
        if (n_id != null) {
            stmt.bindLong(1, n_id);
        }
 
        Long n_pid = entity.getN_pid();
        if (n_pid != null) {
            stmt.bindLong(2, n_pid);
        }
 
        String n_add_date = entity.getN_add_date();
        if (n_add_date != null) {
            stmt.bindString(3, n_add_date);
        }
 
        String n_textcontent = entity.getN_textcontent();
        if (n_textcontent != null) {
            stmt.bindString(4, n_textcontent);
        }
 
        String n_img_url = entity.getN_img_url();
        if (n_img_url != null) {
            stmt.bindString(5, n_img_url);
        }
 
        String n_voice_url = entity.getN_voice_url();
        if (n_voice_url != null) {
            stmt.bindString(6, n_voice_url);
        }
 
        String n_isdone = entity.getN_isdone();
        if (n_isdone != null) {
            stmt.bindString(7, n_isdone);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Notes readEntity(Cursor cursor, int offset) {
        Notes entity = new Notes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // n_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // n_pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // n_add_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // n_textcontent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // n_img_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // n_voice_url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // n_isdone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Notes entity, int offset) {
        entity.setN_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setN_pid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setN_add_date(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setN_textcontent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setN_img_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setN_voice_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setN_isdone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Notes entity, long rowId) {
        entity.setN_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Notes entity) {
        if(entity != null) {
            return entity.getN_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
