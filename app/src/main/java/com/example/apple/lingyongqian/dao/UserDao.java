package com.example.apple.lingyongqian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table e_user_base.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "e_user_base";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property U_id = new Property(0, Long.class, "u_id", true, "U_ID");
        public final static Property U_cloud_id = new Property(1, Long.class, "u_cloud_id", false, "U_CLOUD_ID");
        public final static Property U_name = new Property(2, String.class, "u_name", false, "U_NAME");
        public final static Property U_sex = new Property(3, String.class, "u_sex", false, "U_SEX");
        public final static Property U_age = new Property(4, String.class, "u_age", false, "U_AGE");
        public final static Property U_img = new Property(5, String.class, "u_img", false, "U_IMG");
        public final static Property U_email = new Property(6, String.class, "u_email", false, "U_EMAIL");
        public final static Property U_phone = new Property(7, String.class, "u_phone", false, "U_PHONE");
        public final static Property U_issetpass = new Property(8, String.class, "u_issetpass", false, "U_ISSETPASS");
        public final static Property U_password = new Property(9, String.class, "u_password", false, "U_PASSWORD");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'e_user_base' (" + //
                "'U_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: u_id
                "'U_CLOUD_ID' INTEGER," + // 1: u_cloud_id
                "'U_NAME' TEXT," + // 2: u_name
                "'U_SEX' TEXT," + // 3: u_sex
                "'U_AGE' TEXT," + // 4: u_age
                "'U_IMG' TEXT," + // 5: u_img
                "'U_EMAIL' TEXT," + // 6: u_email
                "'U_PHONE' TEXT," + // 7: u_phone
                "'U_ISSETPASS' TEXT," + // 8: u_issetpass
                "'U_PASSWORD' TEXT);"); // 9: u_password
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'e_user_base'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long u_id = entity.getU_id();
        if (u_id != null) {
            stmt.bindLong(1, u_id);
        }
 
        Long u_cloud_id = entity.getU_cloud_id();
        if (u_cloud_id != null) {
            stmt.bindLong(2, u_cloud_id);
        }
 
        String u_name = entity.getU_name();
        if (u_name != null) {
            stmt.bindString(3, u_name);
        }
 
        String u_sex = entity.getU_sex();
        if (u_sex != null) {
            stmt.bindString(4, u_sex);
        }
 
        String u_age = entity.getU_age();
        if (u_age != null) {
            stmt.bindString(5, u_age);
        }
 
        String u_img = entity.getU_img();
        if (u_img != null) {
            stmt.bindString(6, u_img);
        }
 
        String u_email = entity.getU_email();
        if (u_email != null) {
            stmt.bindString(7, u_email);
        }
 
        String u_phone = entity.getU_phone();
        if (u_phone != null) {
            stmt.bindString(8, u_phone);
        }
 
        String u_issetpass = entity.getU_issetpass();
        if (u_issetpass != null) {
            stmt.bindString(9, u_issetpass);
        }
 
        String u_password = entity.getU_password();
        if (u_password != null) {
            stmt.bindString(10, u_password);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // u_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // u_cloud_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // u_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // u_sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // u_age
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // u_img
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // u_email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // u_phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // u_issetpass
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // u_password
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setU_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setU_cloud_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setU_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setU_sex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setU_age(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setU_img(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setU_email(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setU_phone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setU_issetpass(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setU_password(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setU_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getU_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
