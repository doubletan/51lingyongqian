package com.example.apple.lingyongqian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table e_allbillinfo.
*/
public class AllBillInfoDao extends AbstractDao<AllBillInfo, Long> {

    public static final String TABLENAME = "e_allbillinfo";

    /**
     * Properties of entity AllBillInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Al_pid = new Property(0, Long.class, "al_pid", false, "AL_PID");
        public final static Property Al_id = new Property(1, Long.class, "al_id", true, "AL_ID");
        public final static Property Al_add_date = new Property(2, String.class, "al_add_date", false, "AL_ADD_DATE");
        public final static Property Al_bill_num = new Property(3, String.class, "al_bill_num", false, "AL_BILL_NUM");
        public final static Property Al_bill_type = new Property(4, Integer.class, "al_bill_type", false, "AL_BILL_TYPE");
        public final static Property Al_bill_name = new Property(5, String.class, "al_bill_name", false, "AL_BILL_NAME");
    };


    public AllBillInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AllBillInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'e_allbillinfo' (" + //
                "'AL_PID' INTEGER," + // 0: al_pid
                "'AL_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: al_id
                "'AL_ADD_DATE' TEXT," + // 2: al_add_date
                "'AL_BILL_NUM' TEXT," + // 3: al_bill_num
                "'AL_BILL_TYPE' INTEGER," + // 4: al_bill_type
                "'AL_BILL_NAME' TEXT);"); // 5: al_bill_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'e_allbillinfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AllBillInfo entity) {
        stmt.clearBindings();
 
        Long al_pid = entity.getAl_pid();
        if (al_pid != null) {
            stmt.bindLong(1, al_pid);
        }
 
        Long al_id = entity.getAl_id();
        if (al_id != null) {
            stmt.bindLong(2, al_id);
        }
 
        String al_add_date = entity.getAl_add_date();
        if (al_add_date != null) {
            stmt.bindString(3, al_add_date);
        }
 
        String al_bill_num = entity.getAl_bill_num();
        if (al_bill_num != null) {
            stmt.bindString(4, al_bill_num);
        }
 
        Integer al_bill_type = entity.getAl_bill_type();
        if (al_bill_type != null) {
            stmt.bindLong(5, al_bill_type);
        }
 
        String al_bill_name = entity.getAl_bill_name();
        if (al_bill_name != null) {
            stmt.bindString(6, al_bill_name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public AllBillInfo readEntity(Cursor cursor, int offset) {
        AllBillInfo entity = new AllBillInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // al_pid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // al_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // al_add_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // al_bill_num
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // al_bill_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // al_bill_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AllBillInfo entity, int offset) {
        entity.setAl_pid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAl_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAl_add_date(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAl_bill_num(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAl_bill_type(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAl_bill_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AllBillInfo entity, long rowId) {
        entity.setAl_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AllBillInfo entity) {
        if(entity != null) {
            return entity.getAl_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
